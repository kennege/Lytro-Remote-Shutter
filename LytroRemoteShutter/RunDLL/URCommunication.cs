using System;
using System.Net;
using System.Net.Sockets;

namespace RunDLL
{

    public class URCommunication
    {

        public static string GetLocalIPAddress()
        {
            var host = Dns.GetHostEntry(Dns.GetHostName());
            foreach (var ip in host.AddressList)
            {
                if (ip.AddressFamily == AddressFamily.InterNetwork)
                {
                    return ip.ToString();
                }
            }
            throw new Exception("Local IP Address Not Found!");
        }

        public static string[] ExtractPose()
        {
            string dir = Environment.CurrentDirectory;
            // read in file and split into individual coordinates
            string text = System.IO.File.ReadAllText(String.Format(@"{0}\UR5Trajectory\realsenseData\Matlab\UR5PoseData\poseData.txt", dir));
            string[] poses = text.Split(' ');

            // find the number of positions in the file 
            int length = ((poses.GetUpperBound(0)-1) / 6) + 1;
            string[] pose = new string[length];

            int j = 0;

            // save each 6 coordinate set to a new array element
            for (int i = poses.GetLowerBound(0); i <= poses.GetUpperBound(0); i++)
            {
                if (i % 6 == 0 && i != 0)
                {
                    string[] num = poses[i].Split('\n');
                    pose[j] = String.Format(@"[{0}, {1}, {2}, {3}, {4}, {5}]", poses[i-5], poses[i-4], poses[i-3], poses[i-2], poses[i-1], num[0]);
                    j = j + 1;
                }
            }
            return pose;
        }

        public static int Communicate(string calib)
        {
            int port = 30000;


            if (calib.Equals("Y") || calib.Equals("y"))
            {
                Console.WriteLine("UR5 - Lytro Calibration Routine initiated.");
            }
            string[] pose = ExtractPose(); // extract UR5 coordinates from file generated by generateUR5Trajectory.m
            string dir = Environment.CurrentDirectory;
            Console.WriteLine("Press play on UR5 Polyscope...");
            Console.WriteLine(Program.matlab.Execute(String.Format(@"cd {0}\ur5_setup-master\interface\", dir)));
            Console.WriteLine(Program.matlab.Execute(String.Format(@"s = init('192.168.100.1',{0})",port)));
            Console.WriteLine("Connected.");

            if (calib.Equals("Y") || calib.Equals("y"))
            {
                for (int i = 0; i <= 5; i++)
                {
                    //Program.lytronetclient.TakePicture();
                    System.Threading.Thread.Sleep(1000);
                    Console.WriteLine("Moving to" + pose[i]);
                    Console.WriteLine(Program.matlab.Execute("s"));
                    Console.WriteLine(Program.matlab.Execute(String.Format(@"moverobot(s,{0})", pose[i])));
                    Console.WriteLine("Triggering Lytro");
                    System.Threading.Thread.Sleep(1000);
                }

                Console.WriteLine("6 photos have been taken for calibration. Exit this program, ");
                Console.WriteLine("open 'alignImageToWorldUR5.m', and follow the instructions in the User Manual");
                int count = 0;
                return count;
            } else
            {
                int j = 0;
                foreach (string str in pose)
            {           
                Console.WriteLine("Moving to" + pose[j]);
                Console.WriteLine(Program.matlab.Execute(String.Format(@"moverobot(s,{0})", pose[j])));
                if (j==0)
                    {
                        // allow extra time to each initial position
                        System.Threading.Thread.Sleep(4000);
                    }
                System.Threading.Thread.Sleep(1500);
                Console.WriteLine("Triggering Lytro");  
                Program.lytronetclient.TakePicture();           
                System.Threading.Thread.Sleep(1500);
                j = j + 1;
            }
                int count = j;
                Console.WriteLine("UR5 communication complete. Closing TCP connection...");
                Console.WriteLine(Program.matlab.Execute("fclose(s)")); // close port
                Console.WriteLine("...connection closed.");

                return count;
            }
        }
    }
}
